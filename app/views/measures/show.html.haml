- content_for :page_title do
  %h1= @measure.name

  %p
    This monitor is currently active.

.row
  .span8

    %h3 1. Monitor Allowances
    %table.zebra-striped
      %tbody
        %tr
          %td{:style => 'width: 40%'} Memory
          %td
            - if @measure.notify_mem?
              %strong Don't
            Create an incident if memory >
            %strong
              =h @measure.mem_perc
              \ %
        %tr
          %td 
            Load
          %td
            - if ! @measure.notify_load?
              %strong Don't
            Create an incident if server load >
            %strong
              = h @measure.load_perc
              \ %

        %tr
          %td 
            Swap Space
          %td
            - if ! @measure.notify_swap?
              %strong Don't
            Create an incident if used swap space >
            %strong
              = h @measure.swap_perc
              \ %
        %tr
          %td 
            Server Connection
          %td
            - if @measure.notify_heartbeat?
              %strong Do
              Generate an incident if we can't connect via SSH
            - else
              %strong Do not
              Generate an incident if we can't connect via SSH
        %tr
          %td 
            Monitor Web Pages
          %td
            - if @measure.notify_pages?
              %strong Do
              raise an incident if we can't access a web page
            - else
              %strong Do not
              raise an incident if we can't access a web page
        %tr
          %td 
            Monitor TCP/IP Ports
          %td
            - if @measure.notify_ports?
              %strong Do
              raise an incident if we can't access a port
            - else
              %strong Do not
              raise an incident if we can't access a port
        %tr
          %td 
            Disk Space
          %td
            - if ! @measure.notify_disk?
              %strong Don't
            Create an incident if used disk space >
            %strong
              = h @measure.disk_perc
              \ %
            on any disk.
        %tr
          %td 
            Monitor Bandwidth Usage
          %td
            - if ! @measure.notify_disk?
              %strong Don't
            Raise an incident if bandwidth > 
            %strong
              = h @measure.bandwidth
            %strong
              = h @measure.bandwidth_scale
            over
            %strong
              = h @measure.bandwidth_time
        %tr
          %td{ :colspan => '2'}
            = link_to 'Edit Monitor', edit_measure_path(@measure), :class => 'btn primary'
    
    %h3 2. Who will receive notifications
    %table#users-table.data.table.table-striped
      %thead
        %tr
          %th{ :style => 'width:40%' }
            Name
          %th{ :style => 'width:40%' }
            Period
          %th
            Action
      %tbody
        - @measure.monitor_users.each do |user|
          %tr
            %td
              = h user.user.first_name 
              = h user.user.last_name
            %td
              - if user.notify_type == 0
                Notify by Email after
              - elsif user.notify_type == 1
                Notify by SMS after
              -else
                Notify by Email and SMS after
              = h user.wait_for
              minutes
            %td.action
              = link_to 'Delete', remove_users_path(@measure.id, user.id), :class => 'remote-delete'
    
    %h3 3. Servers to monitor

    %table#servers-table.data.table.table-striped
      %thead
        %tr
          %th{ :style => "width:80%" }
            Server Name
          %th
            Action
      %tbody
        - @measure.monitor_servers.each do |server|
          %tr
            %td
              = h server.server.name
            %td.action
              = link_to 'Delete', remove_servers_path(@measure.id, server.id), :class => 'remote-delete'

  .span4
    .well
      %h3
        Users that will receive alerts from this monitor
      %ul.unstyled
        - @measure.monitor_users.each do |user|
          %li
            = link_to h(user.user.name), user.user
            after
            = h user.wait_for
            minutes

      %a#add-user-link.btn.primary{ :href => "", }
        Add User

    .well
      %h3
        This monitor is effective for the following servers
      %ul.unstyled
        - @measure.monitor_servers.each do |server|
          %li
            = link_to h(server.server.name), :controller => :statistics, :id => server.server.id

      %a#add-server-link.btn.primary{ :href => "" }
        Monitor Another Server

#add-user-form{ :style => "display:none" }
  .modal
    %form#adduser-form{ :onsubmit => "return add_user()", :action => "#" }
      .modal-header
        = link_to 'x', '#', :class => 'close'
        %h3
          Add a contact to notify
      .modal-body
        .clearfix
          %label
            Contact
          .input
            = collection_select(nil, :user_id, @users, :id, :name)
        .clearfix
          %label
            How long to wait before sending an alert
          .input
            %select.wait_for{ :name => "wait_for" }
              %option{ :value => "5" }
                5 Minutes
              %option{ :value => "10" }
                10 Minutes
              %option{ :value => "15" }
                15 Minutes
              %option{ :value => "20" }
                20 Minutes
              %option{ :value => "30" }
                30 Minutes
              %option{ :value => "60" }
                1 hour
        .clearfix
          %label
            What type of alert ?
          .input
            %select.notify_type{ :name => 'notify_type' }
              %option{ :value => "0" }
                Email
              %option{ :value => "1" }
                SMS
              %option{ :value => "2" }
                Both
          
        %input.measure_id{ :name => "measure_id", :type => "hidden", :value => @measure.id }

      .modal-footer
        %button.add-user-button.btn.primary{ :type => "submit", :value => "Add" } Add

#add-server-form{ :style => "display:none" }
  .modal
    %form#addserver-form{ :onsubmit => "return add_server()", :action => "#" }
      .modal-header
        = link_to 'x', '#', :class => 'close'
        %h3
          Add a server to monitor
      .modal-body
        .clearfix
          %label Server
          .input
            = collection_select(nil, :server_id, @servers, :id, :name)
      
        %input.measure_id{ :name => "measure_id", :type => "hidden", :value => @measure.id }

      .modal-footer
        %button.btn.primary{ :type => "submit", :value => "Add" } Add
